{"version":3,"sources":["serviceWorker.js","Components/Searchbox.js","Components/CardList.js","Components/robots.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Searchbox","searchfield","searchChange","className","type","placeholder","onChange","CardList","robots","Error","id","name","username","email","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterdrobot","filter","robot","toLowerCase","includes","length","React","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZE,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACC,yBAAKC,UAAU,QACd,2BACAA,UAAU,4CACVC,KAAK,OACLC,YAAY,aACZC,SAAUJ,MCaEK,G,MAnBE,SAAC,GAAa,EAAZC,OAEjB,MAAM,IAAIC,MAAM,kBCLLD,EAAS,CACtB,CACCE,GAAG,EACHC,KAAK,YACLC,SAAS,YACTC,MAAM,uBAEP,CACCH,GAAG,EACHC,KAAK,QACLC,SAAS,SACTC,MAAM,mBAEP,CACCH,GAAG,EACHC,KAAK,UACLC,SAAS,MACTC,MAAM,iBAEP,CACCH,GAAG,EACHC,KAAK,aACLC,SAAS,OACTC,MAAM,kBAEP,CACCH,GAAG,EACHC,KAAK,eACLC,SAAS,SACTC,MAAM,mBAEP,CACCH,GAAG,EACHC,KAAK,aACLC,SAAS,QACTC,MAAM,qBC1BQC,G,MAPA,SAACC,GACf,OACA,yBAAKC,MAAQ,CAACC,UAAW,SAASC,OAAO,kBAAmBC,OAAO,UACjEJ,EAAMK,YCeMC,E,kDAjBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAIG,KAAKJ,MAAMC,SACP,iDAEDG,KAAKX,MAAMK,a,GAfQQ,aC4DbC,E,kDApDd,aAAe,IAAD,8BACb,gBAQDC,eAAiB,SAACC,GAEjB,EAAKJ,SAAS,CAAC1B,YAAa8B,EAAMC,OAAOC,SARzC,EAAKX,MAAO,CACZd,OAAO,GACPP,YAAY,IALC,E,gEAeM,IAAD,OAClBiC,MAAM,8CACJC,MAAK,SAAAC,GACLA,EAASC,UAETF,MAAK,SAAAG,GACL,EAAKX,SAAS,CAACnB,OAAOA,S,+BAMf,IAAD,OACF+B,EAAab,KAAKJ,MAAMd,OAAOgC,QAAO,SAAAC,GAC3C,OAAOA,EAAM9B,KAAK+B,cAAcC,SAAS,EAAKrB,MAAMrB,YAAYyC,kBAEjE,OAAqB,IAAlBlC,EAAOoC,OAEF,uCAIN,yBAAKzC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAcwB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUtB,OAAQ+B,W,GA3CPM,IAAMjB,WCDxBkB,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SPsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,c","file":"static/js/main.18a690ac.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Searchbox= ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa3 '>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue shadow-5' \r\n\t\t\ttype='text' \r\n\t\t\tplaceholder='robot name' \r\n\t\t\tonChange={searchChange}/>\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\nexport default Searchbox;","import React from'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tif (true) {\r\n\t\tthrow new Error(\"Noooooooo!!!\")\r\n\t}\r\n\tconst CardComponent=robots.map((user,i) => {\r\n\t\treturn(\r\n\t\t\t<Card key={i}\r\n\t\tid={robots[i].id}\r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email}\r\n\t\t/>);\r\n\t})\r\n\treturn(\r\n\t\t<div>\r\n\t    \t{CardComponent}\r\n\t    \t\r\n\t    </div>\r\n\t    );\r\n}\r\nexport default CardList;","export const robots = [\r\n{\r\n\tid:1,\r\n\tname:'Narasimha',\r\n\tusername:'Narasimha',\r\n\temail:'narasimha@gmail.com'\r\n},\r\n{\r\n\tid:2,\r\n\tname:'Nayan',\r\n\tusername:'NNayan',\r\n\temail:'nayan@gmail.com',\r\n},\r\n{\r\n\tid:3,\r\n\tname:'Bhushan',\r\n\tusername:'Bhu',\r\n\temail:'bhu@gmail.com',\r\n},\r\n{\r\n\tid:4,\r\n\tname:'Mr.Perfect',\r\n\tusername:'Naga',\r\n\temail:'naga@gmail.com',\r\n},\r\n{\r\n\tid:5,\r\n\tname:'Mrs..Perfect',\r\n\tusername:'Vimala',\r\n\temail:'vimss@gmail.com',\r\n},\r\n{\r\n\tid:6,\r\n\tname:'My support',\r\n\tusername:'Kruuu',\r\n\temail:'kruthi@gmail.com',\r\n},\r\n];","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t<div style ={{overflowY: 'scroll',border:'5px solid black', height:'500px'}}>\r\n\t\t{props.children}\r\n\t</div>\r\n\t\t);\r\n\t}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info) {\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Error encountered</h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport CardList from '../Components/CardList' ;\r\nimport {robots} from '../Components/robots';\r\nimport './app.css';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\n\r\n//app owns state so use class syntax\r\nclass App extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\t//states def\r\n\t\tthis.state ={\r\n\t\trobots:[],\r\n\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\t//to know the change\r\n\tonSearchChange = (event) => {\r\n\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\t}\r\n\t//to make webpage realistic\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => {\r\n\t\t\t\tresponse.json();\r\n\t\t\t})\r\n\t\t\t.then(users => {\r\n\t\t\t\tthis.setState({robots:robots})\r\n\t\t\t})\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\trender() {\r\n\t\tconst filterdrobot=this.state.robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif(robots.length === 0)\r\n\t\t{\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<Searchbox searchChange={this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filterdrobot} />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport App from'./Containers/App';\n\nReactDOM.render(\n\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}